This project create typical helloworld for a Nexus-4 (possibly Nexus 10) phone using C++.
Here are steps to create android app (ensure java-1.6, ant, gcc > 4.6, android-ndk >= r8 , android-sdk )are present):
 * hg clone https://sgorti@code.google.com/p/aopencl/
 * cd aopencl/helloworld2
 * create a shell script env1.sh that look like:
cat env1.sh 
P1=/opt/android/android-sdk-linux/platform-tools/:/opt/android/android-sdk-linux/tools/:/opt/android-ndk-r8d
export NDK=/opt/android-ndk-r8d/
export PATH=$P1:$PATH

 * ndk-build   #OR ndk-build NDK_DEBUG=1 V=1 
  * Above command will create stripped ARM binary at libs/armeabi-v7a/helloworld and non-stripped binary at: ./obj/local/armeabi-v7a/helloworld
 * Connect phone via USB-cable to computer (Enable 'USB Debugging' in settings)
  * Ensure 'adb devices' shows your phone device
 * adb push  ./obj/local/armeabi-v7a/helloworld2 /data/local/tmp/helloworld2
 * adb push  ./libs/armeabi-v7a/helloworld2 /data/local/tmp/helloworld2

 * adb shell
  *  /data/local/tmp/helloworld2


This variation of helloworld has following modifications:
 * Now OpenCL programs can refer OpenCL APIs as clXXX (instead of  aclXXXX ). 
  * This is done as macro indirection via aopencl_def.h
 * New native libray paths can be added using followig api in aopencl.h
  *  void initFns(const char** libs,int len);

 * cleaned up the aopencl.c with macros boilerplate code for:
  * Multiple shared libraries
  * Mapping dlsym with all OpenCL APIs
  * Removing gcc warnings for variadic-macros
  
 * Uses C++ for helloworld2 (helloworld uses C)

 * This small framework can be used pluggig to any other amdroid smartphone OpenCL stack .
  * Simply supply the library path to initFns API.
